name: Build and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (e.g., v2.0.0)'
        required: true
        default: 'v2.0.0'
      prerelease:
        description: 'Is this a pre-release?'
        type: boolean
        default: false
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x64, arm64]
        
    steps:
    - uses: actions/checkout@v4
      
    - name: Setup Build Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          libgtk-3-dev \
          libnotify-dev
          
    - name: Install JSON-GLib
      run: |
        # Try different package names for JSON-GLib
        sudo apt-get install -y libglib2.0-dev || true
        if ! sudo apt-get install -y libjson-glib-1.0-dev; then
          if ! sudo apt-get install -y json-glib-dev; then
            # Build from source if package not available
            wget https://download.gnome.org/sources/json-glib/1.8/json-glib-1.8.0.tar.xz
            tar -xf json-glib-1.8.0.tar.xz
            cd json-glib-1.8.0
            mkdir build && cd build
            cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local
            make -j$(nproc)
            sudo make install
            sudo ldconfig
            cd ../..
          fi
        fi
          
    - name: Setup Cross Compilation (ARM64)
      if: matrix.arch == 'arm64'
      run: |
        sudo dpkg --add-architecture arm64
        sudo apt-get update
        sudo apt-get install -y \
          gcc-aarch64-linux-gnu \
          libgtk-3-dev:arm64 \
          libglib2.0-dev:arm64
          
    - name: Create Build Directory
      run: mkdir build
      
    - name: Configure CMake (x64)
      if: matrix.arch == 'x64'
      run: |
        cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=/usr
          
    - name: Configure CMake (ARM64)
      if: matrix.arch == 'arm64'
      run: |
        cd build
        export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=/usr \
          -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
          -DCMAKE_SYSTEM_NAME=Linux \
          -DCMAKE_SYSTEM_PROCESSOR=aarch64
          
    - name: Build
      run: |
        cd build
        make -j$(nproc)
        
    - name: Create Executable Archive
      run: |
        cd build
        mkdir -p ottsr-linux-${{ matrix.arch }}
        cp ottsr ottsr-linux-${{ matrix.arch }}/
        
        # Create run script
        cat > ottsr-linux-${{ matrix.arch }}/run.sh << 'EOF'
        #!/bin/bash
        cd "$(dirname "$0")"
        export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$(pwd)/lib"
        ./ottsr "$@"
        EOF
        chmod +x ottsr-linux-${{ matrix.arch }}/run.sh
        
        # Create archive
        tar czf ../ottsr-linux-${{ matrix.arch }}.tar.gz ottsr-linux-${{ matrix.arch }}/
        
    - name: Upload Linux Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-${{ matrix.arch }}
        path: ottsr-linux-${{ matrix.arch }}.tar.gz

  build-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-ninja
          mingw-w64-x86_64-pkg-config
          mingw-w64-x86_64-gtk3
          mingw-w64-x86_64-json-glib
          mingw-w64-x86_64-glib2
          mingw-w64-x86_64-libnotify
          
    - name: Build
      shell: msys2 {0}
      run: |
        mkdir build && cd build
        cmake .. \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=Release
        ninja
        
    - name: Package Windows Executable
      shell: msys2 {0}
      run: |
        cd build
        mkdir ottsr-windows-x64
        cp ottsr.exe ottsr-windows-x64/
        
        # Copy required DLLs
        ldd ottsr.exe | grep mingw64 | awk '{print $3}' | xargs -I {} cp {} ottsr-windows-x64/ || true
        
        # Create batch file
        cat > ottsr-windows-x64/ottsr.bat << 'EOF'
        @echo off
        cd /d "%~dp0"
        ottsr.exe %*
        EOF
        
        # Create archive
        powershell -Command "Compress-Archive -Path 'ottsr-windows-x64' -DestinationPath '../ottsr-windows-x64.zip'"
        
    - name: Upload Windows Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-x64
        path: ottsr-windows-x64.zip

  create-release:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Organize Release Files
      run: |
        mkdir -p release
        find artifacts -type f -name "*.tar.gz" -exec cp {} release/ \;
        find artifacts -type f -name "*.zip" -exec cp {} release/ \;
        ls -la release/
        
    - name: Generate Release Notes
      run: |
        cat > release_notes.md << 'EOF'
        ## Study Timer Pro v2.0.0 - Simple Release
        
        Cross-platform study timer with modern GTK interface.
        
        ### Downloads
        
        **Linux x64**: `ottsr-linux-x64.tar.gz`
        **Linux ARM64**: `ottsr-linux-arm64.tar.gz` 
        **Windows x64**: `ottsr-windows-x64.zip`
        
        ### Installation
        
        **Linux**: Extract and run `./run.sh`
        **Windows**: Extract and run `ottsr.exe`
        
        ### Features
        - Modern GTK interface
        - Multiple study profiles (Pomodoro, Deep Work, Custom)
        - Desktop notifications
        - Session statistics
        - Cross-platform configuration
        EOF
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.event.inputs.version || github.ref_name }}
        name: Study Timer Pro ${{ github.event.inputs.version || github.ref_name }}
        body_path: release_notes.md
        prerelease: ${{ github.event.inputs.prerelease || false }}
        files: release/*
